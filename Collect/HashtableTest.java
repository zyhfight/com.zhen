package Collect;

import java.util.Hashtable;

class A1
{
	int count;
	public A1(int count)
	{
		this.count = count;
	}
	// 根据count的值来判断两个对象是否相等。
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;
		if (obj != null && obj.getClass() == A1.class)
		{
			A1 a = (A1)obj;
			return this.count == a.count;
		}
		return false;
	}
	// 根据count来计算hashCode值。
	public int hashCode()
	{
		return this.count;
	}
}
class B1
{
	// 重写equals()方法，B对象与任何对象通过equals()方法比较都返回true
	public boolean equals(Object obj)
	{
		return true;
	}
}
public class HashtableTest
{
	public static void main(String[] args)
	{
		Hashtable<A1, Object> ht = new Hashtable<A1, Object>();
		ht.put(new A1(60000) , "语文");
		ht.put(new A1(87563) , "数学");
		ht.put(new A1(1232) , new B1());
		/*
		 * HashTable线程安全；key、value值不允许为null，否则报NullPointerException
		 */
//		ht.put(null, null);
		System.out.println(ht);
		// 只要两个对象通过equals比较返回true，
		// Hashtable就认为它们是相等的value。
		// 由于Hashtable中有一个B对象，
		// 它与任何对象通过equals比较都相等，所以下面输出true。
		System.out.println(ht.containsValue("测试字符串")); // ① 输出true
		// 只要两个A对象的count相等，它们通过equals比较返回true，且hashCode相等
		// Hashtable即认为它们是相同的key，所以下面输出true。
		System.out.println(ht.containsKey(new A1(87563)));   // ② 输出true
		// 下面语句可以删除最后一个key-value对
		ht.remove(new A1(1232));    //③
		System.out.println(ht);
	}
}
